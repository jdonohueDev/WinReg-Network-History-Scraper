{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jdonohueDev/WinReg-Network-History-Scraper/blob/main/StudentPerformancePredictor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "2d8921ad",
      "metadata": {
        "id": "2d8921ad"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "import zipfile\n",
        "import io\n",
        "from scipy.io import arff\n",
        "from sklearn.model_selection import train_test_split\n",
        "import warnings\n",
        "import os\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "from sklearn.metrics import accuracy_score\n",
        "import kagglehub\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "8ce10f10",
      "metadata": {
        "id": "8ce10f10"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv(r'/content/StudentPerformanceFactors.csv')\n",
        "df = pd.DataFrame(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "846afd07",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "846afd07",
        "outputId": "bbb3dca0-92ce-427e-9b0b-cab94e111887"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Hours_Studied  Attendance Parental_Involvement Access_to_Resources  \\\n",
              "0                23          84                  Low                High   \n",
              "1                19          64                  Low              Medium   \n",
              "2                24          98               Medium              Medium   \n",
              "3                29          89                  Low              Medium   \n",
              "4                19          92               Medium              Medium   \n",
              "...             ...         ...                  ...                 ...   \n",
              "6602             25          69                 High              Medium   \n",
              "6603             23          76                 High              Medium   \n",
              "6604             20          90               Medium                 Low   \n",
              "6605             10          86                 High                High   \n",
              "6606             15          67               Medium                 Low   \n",
              "\n",
              "     Extracurricular_Activities  Sleep_Hours  Previous_Scores  \\\n",
              "0                            No            7               73   \n",
              "1                            No            8               59   \n",
              "2                           Yes            7               91   \n",
              "3                           Yes            8               98   \n",
              "4                           Yes            6               65   \n",
              "...                         ...          ...              ...   \n",
              "6602                         No            7               76   \n",
              "6603                         No            8               81   \n",
              "6604                        Yes            6               65   \n",
              "6605                        Yes            6               91   \n",
              "6606                        Yes            9               94   \n",
              "\n",
              "     Motivation_Level Internet_Access  Tutoring_Sessions Family_Income  \\\n",
              "0                 Low             Yes                  0           Low   \n",
              "1                 Low             Yes                  2        Medium   \n",
              "2              Medium             Yes                  2        Medium   \n",
              "3              Medium             Yes                  1        Medium   \n",
              "4              Medium             Yes                  3        Medium   \n",
              "...               ...             ...                ...           ...   \n",
              "6602           Medium             Yes                  1          High   \n",
              "6603           Medium             Yes                  3           Low   \n",
              "6604              Low             Yes                  3           Low   \n",
              "6605             High             Yes                  2           Low   \n",
              "6606           Medium             Yes                  0        Medium   \n",
              "\n",
              "     Teacher_Quality School_Type Peer_Influence  Physical_Activity  \\\n",
              "0             Medium      Public       Positive                  3   \n",
              "1             Medium      Public       Negative                  4   \n",
              "2             Medium      Public        Neutral                  4   \n",
              "3             Medium      Public       Negative                  4   \n",
              "4               High      Public        Neutral                  4   \n",
              "...              ...         ...            ...                ...   \n",
              "6602          Medium      Public       Positive                  2   \n",
              "6603            High      Public       Positive                  2   \n",
              "6604          Medium      Public       Negative                  2   \n",
              "6605          Medium     Private       Positive                  3   \n",
              "6606          Medium      Public       Positive                  4   \n",
              "\n",
              "     Learning_Disabilities Parental_Education_Level Distance_from_Home  \\\n",
              "0                       No              High School               Near   \n",
              "1                       No                  College           Moderate   \n",
              "2                       No             Postgraduate               Near   \n",
              "3                       No              High School           Moderate   \n",
              "4                       No                  College               Near   \n",
              "...                    ...                      ...                ...   \n",
              "6602                    No              High School               Near   \n",
              "6603                    No              High School               Near   \n",
              "6604                    No             Postgraduate               Near   \n",
              "6605                    No              High School                Far   \n",
              "6606                    No             Postgraduate               Near   \n",
              "\n",
              "      Gender  Exam_Score  \n",
              "0       Male          67  \n",
              "1     Female          61  \n",
              "2       Male          74  \n",
              "3       Male          71  \n",
              "4     Female          70  \n",
              "...      ...         ...  \n",
              "6602  Female          68  \n",
              "6603  Female          69  \n",
              "6604  Female          68  \n",
              "6605  Female          68  \n",
              "6606    Male          64  \n",
              "\n",
              "[6607 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-945186a1-d28b-483e-9cc2-3c454abffd4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours_Studied</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Parental_Involvement</th>\n",
              "      <th>Access_to_Resources</th>\n",
              "      <th>Extracurricular_Activities</th>\n",
              "      <th>Sleep_Hours</th>\n",
              "      <th>Previous_Scores</th>\n",
              "      <th>Motivation_Level</th>\n",
              "      <th>Internet_Access</th>\n",
              "      <th>Tutoring_Sessions</th>\n",
              "      <th>Family_Income</th>\n",
              "      <th>Teacher_Quality</th>\n",
              "      <th>School_Type</th>\n",
              "      <th>Peer_Influence</th>\n",
              "      <th>Physical_Activity</th>\n",
              "      <th>Learning_Disabilities</th>\n",
              "      <th>Parental_Education_Level</th>\n",
              "      <th>Distance_from_Home</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Exam_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>23</td>\n",
              "      <td>84</td>\n",
              "      <td>Low</td>\n",
              "      <td>High</td>\n",
              "      <td>No</td>\n",
              "      <td>7</td>\n",
              "      <td>73</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Positive</td>\n",
              "      <td>3</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Near</td>\n",
              "      <td>Male</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>64</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>No</td>\n",
              "      <td>8</td>\n",
              "      <td>59</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Negative</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>College</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>Female</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>24</td>\n",
              "      <td>98</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>7</td>\n",
              "      <td>91</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>Postgraduate</td>\n",
              "      <td>Near</td>\n",
              "      <td>Male</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>29</td>\n",
              "      <td>89</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>8</td>\n",
              "      <td>98</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Negative</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>Male</td>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19</td>\n",
              "      <td>92</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>6</td>\n",
              "      <td>65</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3</td>\n",
              "      <td>Medium</td>\n",
              "      <td>High</td>\n",
              "      <td>Public</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>College</td>\n",
              "      <td>Near</td>\n",
              "      <td>Female</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6602</th>\n",
              "      <td>25</td>\n",
              "      <td>69</td>\n",
              "      <td>High</td>\n",
              "      <td>Medium</td>\n",
              "      <td>No</td>\n",
              "      <td>7</td>\n",
              "      <td>76</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>High</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Near</td>\n",
              "      <td>Female</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6603</th>\n",
              "      <td>23</td>\n",
              "      <td>76</td>\n",
              "      <td>High</td>\n",
              "      <td>Medium</td>\n",
              "      <td>No</td>\n",
              "      <td>8</td>\n",
              "      <td>81</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3</td>\n",
              "      <td>Low</td>\n",
              "      <td>High</td>\n",
              "      <td>Public</td>\n",
              "      <td>Positive</td>\n",
              "      <td>2</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Near</td>\n",
              "      <td>Female</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6604</th>\n",
              "      <td>20</td>\n",
              "      <td>90</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>6</td>\n",
              "      <td>65</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Negative</td>\n",
              "      <td>2</td>\n",
              "      <td>No</td>\n",
              "      <td>Postgraduate</td>\n",
              "      <td>Near</td>\n",
              "      <td>Female</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6605</th>\n",
              "      <td>10</td>\n",
              "      <td>86</td>\n",
              "      <td>High</td>\n",
              "      <td>High</td>\n",
              "      <td>Yes</td>\n",
              "      <td>6</td>\n",
              "      <td>91</td>\n",
              "      <td>High</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Private</td>\n",
              "      <td>Positive</td>\n",
              "      <td>3</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Far</td>\n",
              "      <td>Female</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6606</th>\n",
              "      <td>15</td>\n",
              "      <td>67</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>9</td>\n",
              "      <td>94</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Positive</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>Postgraduate</td>\n",
              "      <td>Near</td>\n",
              "      <td>Male</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6607 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-945186a1-d28b-483e-9cc2-3c454abffd4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-945186a1-d28b-483e-9cc2-3c454abffd4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-945186a1-d28b-483e-9cc2-3c454abffd4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-83283fa0-c4bf-4255-a8a8-5b3cad170da5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-83283fa0-c4bf-4255-a8a8-5b3cad170da5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-83283fa0-c4bf-4255-a8a8-5b3cad170da5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2b64d92d-5426-4444-ab95-06fd885109f0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2b64d92d-5426-4444-ab95-06fd885109f0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6607,\n  \"fields\": [\n    {\n      \"column\": \"Hours_Studied\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 44,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          27,\n          20,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 60,\n        \"max\": 100,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          72,\n          60,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Involvement\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Access_to_Resources\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High\",\n          \"Medium\",\n          \"Low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Extracurricular_Activities\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sleep_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 10,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          7,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Previous_Scores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 50,\n        \"max\": 100,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          64,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Motivation_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internet_Access\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tutoring_Sessions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family_Income\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Teacher_Quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Medium\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"School_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Private\",\n          \"Public\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Peer_Influence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Learning_Disabilities\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Education_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High School\",\n          \"College\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance_from_Home\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Near\",\n          \"Moderate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exam_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 55,\n        \"max\": 101,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          96,\n          84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "20a36dbd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20a36dbd",
        "outputId": "08c4ab06-0721-4671-da02-e4f6682c99b1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6607, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "f6174cdd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f6174cdd",
        "outputId": "179495f8-8b10-4c08-fa22-aa1b8f4ddc81"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Hours_Studied', 'Attendance', 'Parental_Involvement',\n",
              "       'Access_to_Resources', 'Extracurricular_Activities', 'Sleep_Hours',\n",
              "       'Previous_Scores', 'Motivation_Level', 'Internet_Access',\n",
              "       'Tutoring_Sessions', 'Family_Income', 'Teacher_Quality', 'School_Type',\n",
              "       'Peer_Influence', 'Physical_Activity', 'Learning_Disabilities',\n",
              "       'Parental_Education_Level', 'Distance_from_Home', 'Gender',\n",
              "       'Exam_Score'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "fe857691",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fe857691",
        "outputId": "4c00a38b-4934-412a-dcf1-43202dc5c9a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Hours_Studied   Attendance  Sleep_Hours  Previous_Scores  \\\n",
            "count    6607.000000  6607.000000   6607.00000      6607.000000   \n",
            "mean       19.975329    79.977448      7.02906        75.070531   \n",
            "std         5.990594    11.547475      1.46812        14.399784   \n",
            "min         1.000000    60.000000      4.00000        50.000000   \n",
            "25%        16.000000    70.000000      6.00000        63.000000   \n",
            "50%        20.000000    80.000000      7.00000        75.000000   \n",
            "75%        24.000000    90.000000      8.00000        88.000000   \n",
            "max        44.000000   100.000000     10.00000       100.000000   \n",
            "\n",
            "       Tutoring_Sessions  Physical_Activity   Exam_Score  \n",
            "count        6607.000000        6607.000000  6607.000000  \n",
            "mean            1.493719           2.967610    67.235659  \n",
            "std             1.230570           1.031231     3.890456  \n",
            "min             0.000000           0.000000    55.000000  \n",
            "25%             1.000000           2.000000    65.000000  \n",
            "50%             1.000000           3.000000    67.000000  \n",
            "75%             2.000000           4.000000    69.000000  \n",
            "max             8.000000           6.000000   101.000000  \n"
          ]
        }
      ],
      "source": [
        "print(df.describe())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "2c7438b6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2c7438b6",
        "outputId": "62a18667-3dce-4bc6-d9d1-20b245be7013"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hours_Studied                  0\n",
            "Attendance                     0\n",
            "Parental_Involvement           0\n",
            "Access_to_Resources            0\n",
            "Extracurricular_Activities     0\n",
            "Sleep_Hours                    0\n",
            "Previous_Scores                0\n",
            "Motivation_Level               0\n",
            "Internet_Access                0\n",
            "Tutoring_Sessions              0\n",
            "Family_Income                  0\n",
            "Teacher_Quality               78\n",
            "School_Type                    0\n",
            "Peer_Influence                 0\n",
            "Physical_Activity              0\n",
            "Learning_Disabilities          0\n",
            "Parental_Education_Level      90\n",
            "Distance_from_Home            67\n",
            "Gender                         0\n",
            "Exam_Score                     0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "missing_counts = df.isna().sum()\n",
        "print(missing_counts)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Remove missing values\n",
        "df = df.dropna()"
      ],
      "metadata": {
        "id": "ecyKdoDa-62_"
      },
      "id": "ecyKdoDa-62_",
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "missing_counts = df.isna().sum()\n",
        "print(missing_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "drQhR8Ba_PGD",
        "outputId": "71084147-f898-4913-9031-2815c1d78176"
      },
      "id": "drQhR8Ba_PGD",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hours_Studied                 0\n",
            "Attendance                    0\n",
            "Parental_Involvement          0\n",
            "Access_to_Resources           0\n",
            "Extracurricular_Activities    0\n",
            "Sleep_Hours                   0\n",
            "Previous_Scores               0\n",
            "Motivation_Level              0\n",
            "Internet_Access               0\n",
            "Tutoring_Sessions             0\n",
            "Family_Income                 0\n",
            "Teacher_Quality               0\n",
            "School_Type                   0\n",
            "Peer_Influence                0\n",
            "Physical_Activity             0\n",
            "Learning_Disabilities         0\n",
            "Parental_Education_Level      0\n",
            "Distance_from_Home            0\n",
            "Gender                        0\n",
            "Exam_Score                    0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Partitioning the data\n",
        "\n",
        "X = data.drop('Exam_Score', axis=1)\n",
        "y = data['Exam_Score']\n",
        "\n",
        "y = (y >= 70).astype(int)\n",
        "\n",
        "X = pd.get_dummies(X, drop_first=True)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
      ],
      "metadata": {
        "id": "109qehmJ_V_K"
      },
      "id": "109qehmJ_V_K",
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Random Forest Classifier\n",
        "model = RandomForestClassifier(\n",
        "    n_estimators=500,\n",
        "    criterion='gini',\n",
        "    max_depth=None,\n",
        "    min_samples_split=5,\n",
        "    min_samples_leaf=1,\n",
        "    )"
      ],
      "metadata": {
        "id": "gJ2bM2tDAps_"
      },
      "id": "gJ2bM2tDAps_",
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "qkqQ5qdSB6cc",
        "outputId": "b222e76e-ae33-4317-e612-175bb5f1d42f"
      },
      "id": "qkqQ5qdSB6cc",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(min_samples_split=5, n_estimators=500)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(min_samples_split=5, n_estimators=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(min_samples_split=5, n_estimators=500)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Accuracy on training data\n",
        "model.score(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4cLx79sBCFR-",
        "outputId": "ae795771-ea76-48c4-d2bc-ebc4b9e18bd7"
      },
      "id": "4cLx79sBCFR-",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9939451277199621"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest_arr = model.predict(X_test)"
      ],
      "metadata": {
        "id": "Ie9rdApGCQjC"
      },
      "id": "Ie9rdApGCQjC",
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Accuracy of Classification\n",
        "accuracy_score(y_test, xtest_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jl7tHoUHCVBo",
        "outputId": "7ac57fa9-4222-47e8-a8f2-e6e2009213f6"
      },
      "id": "Jl7tHoUHCVBo",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9167927382753404"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from operator import mod\n",
        "#Hyper-parameter Tuning\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "''' Hyper-Params for Random Forest Classifier\n",
        "    n_estimators=500,\n",
        "    criterion='gini',\n",
        "    max_depth=None,\n",
        "    min_samples_split=5,\n",
        "    min_samples_leaf=1,\n",
        "'''\n",
        "\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 300, 500],\n",
        "    'max_depth': [None, 10, 30, 50],\n",
        "    'min_samples_split': [2, 6, 10],\n",
        "    'min_samples_leaf': [1, 5, 10],\n",
        "}\n",
        "\n",
        "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)\n",
        "\n",
        "model = grid_search.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "id": "Hv184CWKCmM4"
      },
      "id": "Hv184CWKCmM4",
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(grid_search.best_params_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nB6uRls2D9_W",
        "outputId": "6b6df915-2041-4d3a-c252-d74578ee3f9a"
      },
      "id": "nB6uRls2D9_W",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'max_depth': 50, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 500}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_model = grid_search.best_estimator_"
      ],
      "metadata": {
        "id": "CBpmBQ9HQReZ"
      },
      "id": "CBpmBQ9HQReZ",
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "dwGxT-HwQYUk",
        "outputId": "fc743180-a5b4-40f5-8197-fe2d42efd722"
      },
      "id": "dwGxT-HwQYUk",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(max_depth=50, n_estimators=500)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=50, n_estimators=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=50, n_estimators=500)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "okZoljAVQipc",
        "outputId": "05694af8-29f9-4d4c-e183-df79f633c190"
      },
      "id": "okZoljAVQipc",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, ..., 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Accuracy after tuning\n",
        "accuracy_score(y_test, best_model.predict(X_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PlGG4ZQyQteN",
        "outputId": "b2e90e39-e471-4e69-debc-51d081a3223b"
      },
      "id": "PlGG4ZQyQteN",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9122541603630863"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Feature Importance\n",
        "feature_importances = pd.Series(best_model.feature_importances_, index=X.columns).sort_values(ascending=False)\n",
        "print(feature_importances)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iWZVau0pRuTo",
        "outputId": "265cc3d2-8d75-4670-ad67-2370edf37820"
      },
      "id": "iWZVau0pRuTo",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Attendance                               0.322500\n",
            "Hours_Studied                            0.204450\n",
            "Previous_Scores                          0.089820\n",
            "Tutoring_Sessions                        0.044067\n",
            "Sleep_Hours                              0.036724\n",
            "Physical_Activity                        0.033829\n",
            "Access_to_Resources_Low                  0.017350\n",
            "Access_to_Resources_Medium               0.016718\n",
            "Parental_Involvement_Low                 0.015934\n",
            "Parental_Education_Level_High School     0.014972\n",
            "Family_Income_Low                        0.014689\n",
            "Peer_Influence_Positive                  0.014667\n",
            "Teacher_Quality_Medium                   0.014079\n",
            "Extracurricular_Activities_Yes           0.013888\n",
            "Parental_Involvement_Medium              0.013770\n",
            "Distance_from_Home_Near                  0.013714\n",
            "Gender_Male                              0.013712\n",
            "Motivation_Level_Low                     0.012701\n",
            "Motivation_Level_Medium                  0.012439\n",
            "School_Type_Public                       0.011935\n",
            "Family_Income_Medium                     0.011851\n",
            "Parental_Education_Level_Postgraduate    0.011493\n",
            "Peer_Influence_Neutral                   0.011385\n",
            "Distance_from_Home_Moderate              0.009008\n",
            "Learning_Disabilities_Yes                0.008684\n",
            "Teacher_Quality_Low                      0.008019\n",
            "Internet_Access_Yes                      0.007603\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "Important features for intervention\n",
        "Attendance                               0.326359\n",
        "Hours_Studied                            0.203341\n",
        "Previous_Scores                          0.088780\n",
        "Tutoring_Sessions                        0.042805\n",
        "Sleep_Hours                              0.036601\n",
        "Physical_Activity                        0.033256\n",
        "\n",
        "Categorize important values and create a function for\n",
        "intervention concern levels, values confirmed by Domain Expert.\n",
        "\n",
        "Minimum viable scores until intervention is necessary:\n",
        "Attendance                            <= 80:    Intervention\n",
        "Hours_Studied                         <= 20:    Intervention\n",
        "Previous_Scores                       <= 65:    Intervention\n",
        "Sleep_Hours                           <= 5:     Intervention\n",
        "Tutoring_Sessions                        #:     No intervention, this score is not necessary for intervention but is indicative of impact.\n",
        "Physical_Activity                        #:     No intervention, this score is not necessary for intervention, but is indicative of impact.\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "id": "zGNIPcOuTM87",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "2a5538c5-18d4-44df-f57d-c7c7efa88f09"
      },
      "id": "zGNIPcOuTM87",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nImportant features for intervention\\nAttendance                               0.326359\\nHours_Studied                            0.203341\\nPrevious_Scores                          0.088780\\nTutoring_Sessions                        0.042805\\nSleep_Hours                              0.036601\\nPhysical_Activity                        0.033256\\n\\nCategorize important values and create a function for\\nintervention concern levels, values confirmed by Domain Expert.\\n\\nMinimum viable scores until intervention is necessary:\\nAttendance                            <= 80:    Intervention\\nHours_Studied                         <= 20:    Intervention\\nPrevious_Scores                       <= 65:    Intervention\\nSleep_Hours                           <= 5:     Intervention\\nTutoring_Sessions                        #:     No intervention, this score is not necessary for intervention but is indicative of impact.\\nPhysical_Activity                        #:     No intervention, this score is not necessary for intervention, but is indicative of impact.\\n\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "jidMotUPbWJh",
        "outputId": "8064541f-f657-4d55-d284-9848589b13b4"
      },
      "id": "jidMotUPbWJh",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Hours_Studied  Attendance Parental_Involvement Access_to_Resources  \\\n",
              "0             23          84                  Low                High   \n",
              "1             19          64                  Low              Medium   \n",
              "2             24          98               Medium              Medium   \n",
              "3             29          89                  Low              Medium   \n",
              "4             19          92               Medium              Medium   \n",
              "\n",
              "  Extracurricular_Activities  Sleep_Hours  Previous_Scores Motivation_Level  \\\n",
              "0                         No            7               73              Low   \n",
              "1                         No            8               59              Low   \n",
              "2                        Yes            7               91           Medium   \n",
              "3                        Yes            8               98           Medium   \n",
              "4                        Yes            6               65           Medium   \n",
              "\n",
              "  Internet_Access  Tutoring_Sessions Family_Income Teacher_Quality  \\\n",
              "0             Yes                  0           Low          Medium   \n",
              "1             Yes                  2        Medium          Medium   \n",
              "2             Yes                  2        Medium          Medium   \n",
              "3             Yes                  1        Medium          Medium   \n",
              "4             Yes                  3        Medium            High   \n",
              "\n",
              "  School_Type Peer_Influence  Physical_Activity Learning_Disabilities  \\\n",
              "0      Public       Positive                  3                    No   \n",
              "1      Public       Negative                  4                    No   \n",
              "2      Public        Neutral                  4                    No   \n",
              "3      Public       Negative                  4                    No   \n",
              "4      Public        Neutral                  4                    No   \n",
              "\n",
              "  Parental_Education_Level Distance_from_Home  Gender  Exam_Score  \n",
              "0              High School               Near    Male          67  \n",
              "1                  College           Moderate  Female          61  \n",
              "2             Postgraduate               Near    Male          74  \n",
              "3              High School           Moderate    Male          71  \n",
              "4                  College               Near  Female          70  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-999adb5d-7b1e-49e6-ba7c-69dae057d6dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours_Studied</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Parental_Involvement</th>\n",
              "      <th>Access_to_Resources</th>\n",
              "      <th>Extracurricular_Activities</th>\n",
              "      <th>Sleep_Hours</th>\n",
              "      <th>Previous_Scores</th>\n",
              "      <th>Motivation_Level</th>\n",
              "      <th>Internet_Access</th>\n",
              "      <th>Tutoring_Sessions</th>\n",
              "      <th>Family_Income</th>\n",
              "      <th>Teacher_Quality</th>\n",
              "      <th>School_Type</th>\n",
              "      <th>Peer_Influence</th>\n",
              "      <th>Physical_Activity</th>\n",
              "      <th>Learning_Disabilities</th>\n",
              "      <th>Parental_Education_Level</th>\n",
              "      <th>Distance_from_Home</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Exam_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>23</td>\n",
              "      <td>84</td>\n",
              "      <td>Low</td>\n",
              "      <td>High</td>\n",
              "      <td>No</td>\n",
              "      <td>7</td>\n",
              "      <td>73</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Positive</td>\n",
              "      <td>3</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Near</td>\n",
              "      <td>Male</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>64</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>No</td>\n",
              "      <td>8</td>\n",
              "      <td>59</td>\n",
              "      <td>Low</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Negative</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>College</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>Female</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>24</td>\n",
              "      <td>98</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>7</td>\n",
              "      <td>91</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>Postgraduate</td>\n",
              "      <td>Near</td>\n",
              "      <td>Male</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>29</td>\n",
              "      <td>89</td>\n",
              "      <td>Low</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>8</td>\n",
              "      <td>98</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Public</td>\n",
              "      <td>Negative</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>High School</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>Male</td>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19</td>\n",
              "      <td>92</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>6</td>\n",
              "      <td>65</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3</td>\n",
              "      <td>Medium</td>\n",
              "      <td>High</td>\n",
              "      <td>Public</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>4</td>\n",
              "      <td>No</td>\n",
              "      <td>College</td>\n",
              "      <td>Near</td>\n",
              "      <td>Female</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-999adb5d-7b1e-49e6-ba7c-69dae057d6dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-999adb5d-7b1e-49e6-ba7c-69dae057d6dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-999adb5d-7b1e-49e6-ba7c-69dae057d6dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ceb89785-a51d-40e5-8cb9-612082cf53b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ceb89785-a51d-40e5-8cb9-612082cf53b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ceb89785-a51d-40e5-8cb9-612082cf53b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6378,\n  \"fields\": [\n    {\n      \"column\": \"Hours_Studied\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 44,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          27,\n          20,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 60,\n        \"max\": 100,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          72,\n          60,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Involvement\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Access_to_Resources\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High\",\n          \"Medium\",\n          \"Low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Extracurricular_Activities\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sleep_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 10,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          7,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Previous_Scores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 50,\n        \"max\": 100,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          64,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Motivation_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internet_Access\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tutoring_Sessions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family_Income\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Teacher_Quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Medium\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"School_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Private\",\n          \"Public\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Peer_Influence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Learning_Disabilities\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Education_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High School\",\n          \"College\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance_from_Home\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Near\",\n          \"Moderate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exam_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 55,\n        \"max\": 101,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          96,\n          84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualization"
      ],
      "metadata": {
        "id": "ys8OaCWAjaN9"
      },
      "id": "ys8OaCWAjaN9"
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a new dataframe without dummies for visualization\n",
        "dfvis = df.copy()\n",
        "\n",
        "#Categorical to numerical mapping\n",
        "dfvis['Gender'] = dfvis['Gender'].map({'Female': 0, 'Male': 1})\n",
        "dfvis['Parental_Involvement'] = dfvis['Parental_Involvement'].map({'Low': 0, 'Medium': 1, 'High': 3})\n",
        "dfvis['Extracurricular_Activities'] = dfvis['Extracurricular_Activities'].map({'No': 0, 'Yes': 1})\n",
        "dfvis['Access_to_Resources'] = dfvis['Access_to_Resources'].map({'Low': 0, 'Medium': 1, 'High': 2})\n",
        "dfvis['Motivation_Level'] = dfvis['Motivation_Level'].map({'Low': 0, 'Medium': 1, 'High': 2})\n",
        "dfvis['Internet_Access'] = dfvis['Internet_Access'].map({'No': 0, 'Yes': 1})\n",
        "dfvis['Family_Income'] = dfvis['Family_Income'].map({'Low': 0, 'Medium': 1, 'High': 2})\n",
        "dfvis['Teacher_Quality'] = dfvis['Teacher_Quality'].map({'Low': 0, 'Medium': 1, 'High': 2})\n",
        "dfvis['School_Type'] = dfvis['School_Type'].map({'Public': 0, 'Private': 1})\n",
        "dfvis['Peer_Influence'] = dfvis['Peer_Influence'].map({'Negative': 0, 'Neutral': 1, 'Positive': 2})\n",
        "dfvis['Learning_Disabilities'] = dfvis['Learning_Disabilities'].map({'No': 0, 'Yes': 1})\n",
        "dfvis['Parental_Education_Level'] = dfvis['Parental_Education_Level'].map({'High School': 0, 'College': 1, 'Postgraduate': 2})\n",
        "dfvis['Distance_from_Home'] = dfvis['Distance_from_Home'].map({'Near': 0, 'Moderate': 1, 'Far': 2})"
      ],
      "metadata": {
        "id": "PDZ_ReYIkgQj"
      },
      "id": "PDZ_ReYIkgQj",
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking if values have been properly mapped\n",
        "dfvis"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "2WLPeWIbmvRx",
        "outputId": "a01fe409-f503-4b3e-f436-9987e6cae6bc"
      },
      "id": "2WLPeWIbmvRx",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Hours_Studied  Attendance  Parental_Involvement  Access_to_Resources  \\\n",
              "0                23          84                     0                    2   \n",
              "1                19          64                     0                    1   \n",
              "2                24          98                     1                    1   \n",
              "3                29          89                     0                    1   \n",
              "4                19          92                     1                    1   \n",
              "...             ...         ...                   ...                  ...   \n",
              "6602             25          69                     3                    1   \n",
              "6603             23          76                     3                    1   \n",
              "6604             20          90                     1                    0   \n",
              "6605             10          86                     3                    2   \n",
              "6606             15          67                     1                    0   \n",
              "\n",
              "      Extracurricular_Activities  Sleep_Hours  Previous_Scores  \\\n",
              "0                              0            7               73   \n",
              "1                              0            8               59   \n",
              "2                              1            7               91   \n",
              "3                              1            8               98   \n",
              "4                              1            6               65   \n",
              "...                          ...          ...              ...   \n",
              "6602                           0            7               76   \n",
              "6603                           0            8               81   \n",
              "6604                           1            6               65   \n",
              "6605                           1            6               91   \n",
              "6606                           1            9               94   \n",
              "\n",
              "      Motivation_Level  Internet_Access  Tutoring_Sessions  Family_Income  \\\n",
              "0                    0                1                  0              0   \n",
              "1                    0                1                  2              1   \n",
              "2                    1                1                  2              1   \n",
              "3                    1                1                  1              1   \n",
              "4                    1                1                  3              1   \n",
              "...                ...              ...                ...            ...   \n",
              "6602                 1                1                  1              2   \n",
              "6603                 1                1                  3              0   \n",
              "6604                 0                1                  3              0   \n",
              "6605                 2                1                  2              0   \n",
              "6606                 1                1                  0              1   \n",
              "\n",
              "      Teacher_Quality  School_Type  Peer_Influence  Physical_Activity  \\\n",
              "0                   1            0               2                  3   \n",
              "1                   1            0               0                  4   \n",
              "2                   1            0               1                  4   \n",
              "3                   1            0               0                  4   \n",
              "4                   2            0               1                  4   \n",
              "...               ...          ...             ...                ...   \n",
              "6602                1            0               2                  2   \n",
              "6603                2            0               2                  2   \n",
              "6604                1            0               0                  2   \n",
              "6605                1            1               2                  3   \n",
              "6606                1            0               2                  4   \n",
              "\n",
              "      Learning_Disabilities  Parental_Education_Level  Distance_from_Home  \\\n",
              "0                         0                         0                   0   \n",
              "1                         0                         1                   1   \n",
              "2                         0                         2                   0   \n",
              "3                         0                         0                   1   \n",
              "4                         0                         1                   0   \n",
              "...                     ...                       ...                 ...   \n",
              "6602                      0                         0                   0   \n",
              "6603                      0                         0                   0   \n",
              "6604                      0                         2                   0   \n",
              "6605                      0                         0                   2   \n",
              "6606                      0                         2                   0   \n",
              "\n",
              "      Gender  Exam_Score  \n",
              "0          1          67  \n",
              "1          0          61  \n",
              "2          1          74  \n",
              "3          1          71  \n",
              "4          0          70  \n",
              "...      ...         ...  \n",
              "6602       0          68  \n",
              "6603       0          69  \n",
              "6604       0          68  \n",
              "6605       0          68  \n",
              "6606       1          64  \n",
              "\n",
              "[6378 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5d28767-3b87-4595-aed6-4fc74395b833\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours_Studied</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Parental_Involvement</th>\n",
              "      <th>Access_to_Resources</th>\n",
              "      <th>Extracurricular_Activities</th>\n",
              "      <th>Sleep_Hours</th>\n",
              "      <th>Previous_Scores</th>\n",
              "      <th>Motivation_Level</th>\n",
              "      <th>Internet_Access</th>\n",
              "      <th>Tutoring_Sessions</th>\n",
              "      <th>Family_Income</th>\n",
              "      <th>Teacher_Quality</th>\n",
              "      <th>School_Type</th>\n",
              "      <th>Peer_Influence</th>\n",
              "      <th>Physical_Activity</th>\n",
              "      <th>Learning_Disabilities</th>\n",
              "      <th>Parental_Education_Level</th>\n",
              "      <th>Distance_from_Home</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Exam_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>23</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>73</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>59</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>24</td>\n",
              "      <td>98</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>91</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>29</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>98</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6602</th>\n",
              "      <td>25</td>\n",
              "      <td>69</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6603</th>\n",
              "      <td>23</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>81</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6604</th>\n",
              "      <td>20</td>\n",
              "      <td>90</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6605</th>\n",
              "      <td>10</td>\n",
              "      <td>86</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>91</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6606</th>\n",
              "      <td>15</td>\n",
              "      <td>67</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>94</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6378 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5d28767-3b87-4595-aed6-4fc74395b833')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5d28767-3b87-4595-aed6-4fc74395b833 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5d28767-3b87-4595-aed6-4fc74395b833');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c86094f2-8417-44a7-add3-212aa2471dab\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c86094f2-8417-44a7-add3-212aa2471dab')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c86094f2-8417-44a7-add3-212aa2471dab button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_50f0c94b-7183-40ef-81d9-b780eb65c6e2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfvis')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_50f0c94b-7183-40ef-81d9-b780eb65c6e2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dfvis');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfvis",
              "summary": "{\n  \"name\": \"dfvis\",\n  \"rows\": 6378,\n  \"fields\": [\n    {\n      \"column\": \"Hours_Studied\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 44,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          27,\n          20,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 60,\n        \"max\": 100,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          72,\n          60,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Involvement\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Access_to_Resources\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Extracurricular_Activities\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sleep_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 10,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          7,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Previous_Scores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 50,\n        \"max\": 100,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          64,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Motivation_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Internet_Access\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tutoring_Sessions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family_Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Teacher_Quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"School_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Peer_Influence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Learning_Disabilities\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parental_Education_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance_from_Home\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exam_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 55,\n        \"max\": 101,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          96,\n          84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot Comparison of Calibration of Classifiers\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Assuming 'best_model' and 'X_test', 'y_test' are defined from your previous code\n",
        "\n",
        "# Predict probabilities\n",
        "y_prob = best_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Create bins for calibration plot\n",
        "bins = np.linspace(0, 1, 11)\n",
        "\n",
        "# Calculate mean predicted probability and observed frequency in each bin\n",
        "bin_means = []\n",
        "bin_freqs = []\n",
        "\n",
        "for i in range(len(bins) - 1):\n",
        "  bin_indices = np.where((y_prob >= bins[i]) & (y_prob < bins[i + 1]))[0]\n",
        "  if len(bin_indices) > 0:\n",
        "    bin_means.append(np.mean(y_prob[bin_indices]))\n",
        "    bin_freqs.append(np.mean(y_test.iloc[bin_indices]))\n",
        "\n",
        "# Plot calibration curve\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(bin_means, bin_freqs, marker='o', linestyle='-', label='Random Forest')\n",
        "plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Perfect Calibration')\n",
        "plt.xlabel('Mean Predicted Probability')\n",
        "plt.ylabel('Observed Frequency')\n",
        "plt.title('Calibration Curve')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "I0ME17cbmwx5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "outputId": "86e1569d-2206-4791-cb53-fac9d57cca2f"
      },
      "id": "I0ME17cbmwx5",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the ROC curve\n",
        "\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'best_model' and 'X_test', 'y_test' are defined from your previous code\n",
        "\n",
        "# Predict probabilities\n",
        "y_prob = best_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Compute ROC curve and ROC area\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "# Plot ROC curve\n",
        "plt.figure()\n",
        "plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ZuvM2ZmGNbl5",
        "outputId": "4e0ab5b2-8e7d-4d82-c4ac-02afaf4adb84"
      },
      "id": "ZuvM2ZmGNbl5",
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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vhylamvb1gnbtnlzTBARkRbgGCHSakZGunj4MB4AoKengyVLOuLkyUEsgoiItIR2F0KmFaVOQBKztzfDzz93Q82a1vj772H46quWOa4bREREZZf2HhorVxMw4Ld+bXPiRDgaNrRD+fLGqrZu3Wrgww+rQk+P9wkjItI22tsjZFVN6gRUjFJTMzFxYgA++GA7Row4AvF6VPT/YxFERKSdtLcQkmnvU9c216/HoGnTTVi58gIAYP/+2wgIuCdxKiIiKglYDVCZpVQKrFr1N5o02YTr158CAAwM5Fi9ujM6d64qcToiIioJtHeMEJVpUVGJGDLkMAID76va6tWzwc6dvVC3ro2EyYiIqCRhIURljr9/KIYO9Uds7CtV28SJzbFwYQcYGvK/PBERZeOnApUp5849RPfuu1TTdnam2LrVG506uUqYioiISiqOEaIyxcPDET161AQAdO9eA9evj2IRREREeWKPEJVqQgjIZNkXQJTJZNi0qSu6dasBX9/6avOIiIj+iz1CVGpFRsajffttOHIkTK29fHljDB7cgEUQERG9E3uEqFTas+cmRow4gpcvU3Hz5lNcuzYKdnamUsciIqJShj1CVKokJKRh8OBD8PHZh5cvUwEAhoa6ePIkUeJkRERUGrFHiEqNoKBI9O9/AA8evFS1+fjUwbp1H8HKyki6YEREVGqxEKISLzNTifnz/8T8+X9Coci6R5iZmT7Wru2CAQPcOBaIiIgKjIUQlWgRES/Rr99+BAU9UrV5eDjil196wNnZSsJkRERUFnCMEJVoOjoy3Lr1DAAgl8swd25bnDkzmEUQEREVChZCVKJVrmyB9es/houLFc6e/QyzZnlCV5f/bYmIqHDwE4VKlL/++hcJCWlqbX371sXNm6PRvHkliVIREVFZVSIKobVr18LJyQmGhoZo1qwZLl68mOeymzZtQuvWrWFlZQUrKyt07NjxrctT6ZCersDUqSfg6emHceOO55jPm6USEVFRkLwQ2r17NyZNmoTZs2fj8uXLqF+/Pry8vPD06dNclz99+jQ+/fRTnDp1CkFBQXB0dESnTp3w+PHjYk5OhSU0NBYtWvyMxYvPQQhg27ar+O23+1LHIiIiLSATQggpAzRr1gxNmjTBDz/8AABQKpVwdHTEuHHjMHXq1Heur1AoYGVlhR9++AGDBg165/IJCQmwsLBA/K7u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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: plot OOB Errors for Random Forests\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'best_model' is your trained RandomForestClassifier\n",
        "oob_errors = []\n",
        "n_estimators_range = range(1, 501) # Range should match your n_estimators in the model\n",
        "for n_estimators in n_estimators_range:\n",
        "  rf = RandomForestClassifier(n_estimators=n_estimators, oob_score=True, random_state=42,n_jobs=-1) #n_jobs=-1 for parallelization\n",
        "  rf.fit(X_train, y_train)\n",
        "  oob_errors.append(1 - rf.oob_score_)\n",
        "\n",
        "# Plot OOB errors\n",
        "plt.plot(n_estimators_range, oob_errors)\n",
        "plt.xlabel(\"Number of Trees\")\n",
        "plt.ylabel(\"OOB Error\")\n",
        "plt.title(\"OOB Error vs Number of Trees\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "1F2Jp9dKTDVN",
        "outputId": "c12f774c-25c5-4bf6-c728-09acf0617c50"
      },
      "id": "1F2Jp9dKTDVN",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: plot Final_Grade probability distribution\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'best_model' and 'X_test' are defined from your previous code\n",
        "y_prob = best_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Create a histogram of the predicted probabilities\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(y_prob, bins=20, color='skyblue', edgecolor='black')\n",
        "plt.xlabel('Predicted Probability of Final Grade >= 70')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Probability Distribution of Final Grade')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "E1Cd_YSfXa1v",
        "outputId": "45a1f5b9-eff0-4b81-9878-a2598290fe21"
      },
      "id": "E1Cd_YSfXa1v",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}